/*ESP 8266 PIN Belegung
   1      ???RST???
   3      ???A0???
   5      16
   4      14
   0      12
   2      13
   GND    15
   5V     3.3V
*/

/* Servo Setup
   5V, GND, Pin 2 (D4)

   RFID Setup
   15 D8  --> SDA
   14 D5  --> SCK
   13 D7  --> MOSI
   12 D6  --> MISO
   GND    --> GND
   0 D3   --> RST
   3.3V --> 3.3V
*/

//###########################################################
//Bibliotheken
//###########################################################
#include <SPI.h>        //RFID
#include <MFRC522.h>    //RFID
#include <HeartBeat.h>
#include <Servo.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>

//###########################################################
//Instanziierung
//###########################################################
Servo servo;
HeartBeat HB;

//RFID Pins
#define SS_PIN 15
#define RST_PIN 0
MFRC522 rfid(SS_PIN, RST_PIN);

//Wlan
const char *SSID = "Vodafone-A845";
const char *PASS = "FHRrCFtcCARgPPLR";
//String HOST = "http://dlp.hs-kempten.de/info/sandbox2021/demoserver/verarbeiteWetter.php"; // DLP Demoserver
//String HOST = "http://192.168.0.1/demoserver/verarbeitenWetter.php";                       // DLP-Raspberry
String HOSTprotokoll = "http://192.168.0.194/RFID_Website/protokoll.php";
String HOSTproof = "http://192.168.0.194/RFID_Website/proof.php";
String HOSTpassword = "http://192.168.0.194/RFID_Website/password.php";
String HOSTreset = "http://192.168.0.194/RFID_Website/login.php";

WiFiClient client;

//###########################################################
//Funktionen
//###########################################################
int httpCode;
String payload;
String zugang;
String password;

void sendData(int tag, int zugang) {
  HTTPClient http;
  String Link = HOSTprotokoll + "?tag=" + (String)tag + "&zugang=" + (String)zugang;
  http.begin(client, Link);
  httpCode = http.GET();
  payload = http.getString();
  Serial.println("Daten an Protokoll übermittelt");
  http.end();  
}

String requestTag(long tag) {
  HTTPClient http;
  String Link = HOSTproof + "?tag=" + (String)tag;
  http.begin(client, Link);
  httpCode = http.GET();
  payload = http.getString();
  Serial.println(payload);
  http.end();
  return payload;
}

String requestPin() {
  HTTPClient http;
  String Link = HOSTpassword;
  http.begin(client, Link);
  httpCode = http.GET();
  payload = http.getString();
  http.end();
  return payload;
}

void resetPin() {
  HTTPClient http;
  String Link = HOSTreset + "?pincode=0";
  http.begin(client, Link);
  httpCode = http.GET();
  payload = http.getString();
  http.end();
}

//###########################################################
//Setup
//###########################################################
void setup() {

  Serial.begin(115200);

  //RFID Setup
  SPI.begin();
  rfid.PCD_Init();

  //Servo Setup
  servo.attach(2);
  servo.write(1);

  //Heartbeat Setup
  HB.begin(LED_BUILTIN, 0.2);
  HB.setDutyCycle(20);

  //WLAN Setup
  WiFi.begin(SSID, PASS);
  int retries = 0;
  while ((WiFi.status() != WL_CONNECTED) && (retries < 50)) {
    retries++;
    delay(500);
    Serial.print(".");
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println(("WiFi connected"));
    Serial.println(WiFi.localIP()); 
  }

}
//###########################################################
//Loop
//###########################################################
void loop() {

  //Pin abfragen
  password = requestPin();
  if (password != "5") {
  }
  else {
    Serial.println("PIN korrekt eingebeben");
    sendData(000000, 1);
    servo.write(70);
    delay(2000);
    resetPin();
  }

  //Servo zurücksetzen
  servo.write(0);

  //---------------------Heartbeat---------------------
  HB.beat();

  //---------------------RFID Loop---------------------
  //Wenn kein Chip in Reichweite ist
  if ( ! rfid.PICC_IsNewCardPresent()) {
    return;
  }

  //Wenn kein Sender asugewählt wurde
  if ( ! rfid.PICC_ReadCardSerial()) {
    return;
  }

  //neue Variable für Codenummer des Chips
  long code = 0;
  //Originalcode in lesbarere Zahl ändern
  for (byte i = 0; i < rfid.uid.size; i++) {
    code = ((code + rfid.uid.uidByte[i]) * 10);
  }

  //Ausgabe des Kartencodes
  Serial.print("Die Kartennummer lautet: ");
  Serial.println(code);

  zugang = requestTag(code);

  if (zugang != "4") {
    Serial.println("Zugang verweigert");
    sendData(code, 0);
    delay(500);
    
  }
  else {
    Serial.println("Zugang gewaehrt");
    sendData(code, 1);
    servo.write(70);
    delay(2000);
  }
  
}
